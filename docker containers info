✅ 2. Docker Containers
📘 Definition:
        A Docker container is a running instance of a Docker image. It’s an isolated environment that runs your application with all its dependencies
        bundled inside.

🧱 Key Properties:
| Property    | **Description**                                                              |
| ----------- | ---------------------------------------------------------------------------- |
| Lightweight | Shares the host OS kernel, unlike virtual machines.                          |
| Isolated    | Has its own process space, network, and filesystem.                          |
| Ephemeral   | By default, data is lost when the container stops (unless volumes are used). |
| Portable    | Runs consistently on any environment with Docker.                            |


⚙️ Lifecycle of a Container:
        Create
        Start
        Running
        Stop
        Remove

🧪 Common Docker Container Commands:

| Action                        | Command                            |
| ----------------------------- | ---------------------------------- |
| List running containers       | `docker ps`                        |
| List all containers           | `docker ps -a`                     |
| Create & run container        | `docker run <image>`               |
| Run with name                 | `docker run --name <name> <image>` |
| Run in background             | `docker run -d <image>`            |
| Run interactively             | `docker run -it <image> /bin/bash` |
| Stop container                | `docker stop <container>`          |
| Start container               | `docker start <container>`         |
| Restart container             | `docker restart <container>`       |
| Remove container              | `docker rm <container>`            |
| Remove all stopped containers | `docker container prune`           |


| Action                           | Command                                 |
| -------------------------------- | --------------------------------------- |
| View logs                        | `docker logs <container>`               |
| Tail logs                        | `docker logs -f <container>`            |
| Execute command inside container | `docker exec -it <container> <command>` |

  
  
📦 Example:
        docker run -it --name testhello helloimage
        -it: Interactive terminal
        --name: Assigns a name to the container
        helloimage: Image to run

📌 Real-World Analogy:
        Image = Class (blueprint)
        Container = Object (instance of the class)
